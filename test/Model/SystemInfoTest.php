<?php
/**
 * SystemInfoTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piurafunk\Docker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Piurafunk\Docker;

use PHPUnit\Framework\TestCase;

/**
 * SystemInfoTest Class Doc Comment
 *
 * @category    Class
 * @description SystemInfo
 * @package     Piurafunk\Docker
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class SystemInfoTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "SystemInfo"
     */
    public function testSystemInfo()
    {
    }

    /**
     * Test attribute "iD"
     */
    public function testPropertyID()
    {
    }

    /**
     * Test attribute "containers"
     */
    public function testPropertyContainers()
    {
    }

    /**
     * Test attribute "containersRunning"
     */
    public function testPropertyContainersRunning()
    {
    }

    /**
     * Test attribute "containersPaused"
     */
    public function testPropertyContainersPaused()
    {
    }

    /**
     * Test attribute "containersStopped"
     */
    public function testPropertyContainersStopped()
    {
    }

    /**
     * Test attribute "images"
     */
    public function testPropertyImages()
    {
    }

    /**
     * Test attribute "driver"
     */
    public function testPropertyDriver()
    {
    }

    /**
     * Test attribute "driverStatus"
     */
    public function testPropertyDriverStatus()
    {
    }

    /**
     * Test attribute "dockerRootDir"
     */
    public function testPropertyDockerRootDir()
    {
    }

    /**
     * Test attribute "systemStatus"
     */
    public function testPropertySystemStatus()
    {
    }

    /**
     * Test attribute "plugins"
     */
    public function testPropertyPlugins()
    {
    }

    /**
     * Test attribute "memoryLimit"
     */
    public function testPropertyMemoryLimit()
    {
    }

    /**
     * Test attribute "swapLimit"
     */
    public function testPropertySwapLimit()
    {
    }

    /**
     * Test attribute "kernelMemory"
     */
    public function testPropertyKernelMemory()
    {
    }

    /**
     * Test attribute "cpuCfsPeriod"
     */
    public function testPropertyCpuCfsPeriod()
    {
    }

    /**
     * Test attribute "cpuCfsQuota"
     */
    public function testPropertyCpuCfsQuota()
    {
    }

    /**
     * Test attribute "cPUShares"
     */
    public function testPropertyCPUShares()
    {
    }

    /**
     * Test attribute "cPUSet"
     */
    public function testPropertyCPUSet()
    {
    }

    /**
     * Test attribute "pidsLimit"
     */
    public function testPropertyPidsLimit()
    {
    }

    /**
     * Test attribute "oomKillDisable"
     */
    public function testPropertyOomKillDisable()
    {
    }

    /**
     * Test attribute "iPv4Forwarding"
     */
    public function testPropertyIPv4Forwarding()
    {
    }

    /**
     * Test attribute "bridgeNfIptables"
     */
    public function testPropertyBridgeNfIptables()
    {
    }

    /**
     * Test attribute "bridgeNfIp6tables"
     */
    public function testPropertyBridgeNfIp6tables()
    {
    }

    /**
     * Test attribute "debug"
     */
    public function testPropertyDebug()
    {
    }

    /**
     * Test attribute "nFd"
     */
    public function testPropertyNFd()
    {
    }

    /**
     * Test attribute "nGoroutines"
     */
    public function testPropertyNGoroutines()
    {
    }

    /**
     * Test attribute "systemTime"
     */
    public function testPropertySystemTime()
    {
    }

    /**
     * Test attribute "loggingDriver"
     */
    public function testPropertyLoggingDriver()
    {
    }

    /**
     * Test attribute "cgroupDriver"
     */
    public function testPropertyCgroupDriver()
    {
    }

    /**
     * Test attribute "nEventsListener"
     */
    public function testPropertyNEventsListener()
    {
    }

    /**
     * Test attribute "kernelVersion"
     */
    public function testPropertyKernelVersion()
    {
    }

    /**
     * Test attribute "operatingSystem"
     */
    public function testPropertyOperatingSystem()
    {
    }

    /**
     * Test attribute "oSType"
     */
    public function testPropertyOSType()
    {
    }

    /**
     * Test attribute "architecture"
     */
    public function testPropertyArchitecture()
    {
    }

    /**
     * Test attribute "nCPU"
     */
    public function testPropertyNCPU()
    {
    }

    /**
     * Test attribute "memTotal"
     */
    public function testPropertyMemTotal()
    {
    }

    /**
     * Test attribute "indexServerAddress"
     */
    public function testPropertyIndexServerAddress()
    {
    }

    /**
     * Test attribute "registryConfig"
     */
    public function testPropertyRegistryConfig()
    {
    }

    /**
     * Test attribute "genericResources"
     */
    public function testPropertyGenericResources()
    {
    }

    /**
     * Test attribute "httpProxy"
     */
    public function testPropertyHttpProxy()
    {
    }

    /**
     * Test attribute "httpsProxy"
     */
    public function testPropertyHttpsProxy()
    {
    }

    /**
     * Test attribute "noProxy"
     */
    public function testPropertyNoProxy()
    {
    }

    /**
     * Test attribute "name"
     */
    public function testPropertyName()
    {
    }

    /**
     * Test attribute "labels"
     */
    public function testPropertyLabels()
    {
    }

    /**
     * Test attribute "experimentalBuild"
     */
    public function testPropertyExperimentalBuild()
    {
    }

    /**
     * Test attribute "serverVersion"
     */
    public function testPropertyServerVersion()
    {
    }

    /**
     * Test attribute "clusterStore"
     */
    public function testPropertyClusterStore()
    {
    }

    /**
     * Test attribute "clusterAdvertise"
     */
    public function testPropertyClusterAdvertise()
    {
    }

    /**
     * Test attribute "runtimes"
     */
    public function testPropertyRuntimes()
    {
    }

    /**
     * Test attribute "defaultRuntime"
     */
    public function testPropertyDefaultRuntime()
    {
    }

    /**
     * Test attribute "swarm"
     */
    public function testPropertySwarm()
    {
    }

    /**
     * Test attribute "liveRestoreEnabled"
     */
    public function testPropertyLiveRestoreEnabled()
    {
    }

    /**
     * Test attribute "isolation"
     */
    public function testPropertyIsolation()
    {
    }

    /**
     * Test attribute "initBinary"
     */
    public function testPropertyInitBinary()
    {
    }

    /**
     * Test attribute "containerdCommit"
     */
    public function testPropertyContainerdCommit()
    {
    }

    /**
     * Test attribute "runcCommit"
     */
    public function testPropertyRuncCommit()
    {
    }

    /**
     * Test attribute "initCommit"
     */
    public function testPropertyInitCommit()
    {
    }

    /**
     * Test attribute "securityOptions"
     */
    public function testPropertySecurityOptions()
    {
    }

    /**
     * Test attribute "productLicense"
     */
    public function testPropertyProductLicense()
    {
    }

    /**
     * Test attribute "warnings"
     */
    public function testPropertyWarnings()
    {
    }
}
