<?php
/**
 * HostConfigTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piurafunk\Docker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Piurafunk\Docker;

use PHPUnit\Framework\TestCase;

/**
 * HostConfigTest Class Doc Comment
 *
 * @category    Class
 * @description Container configuration that depends on the host we are running on
 * @package     Piurafunk\Docker
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class HostConfigTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "HostConfig"
     */
    public function testHostConfig()
    {
    }

    /**
     * Test attribute "cpuShares"
     */
    public function testPropertyCpuShares()
    {
    }

    /**
     * Test attribute "memory"
     */
    public function testPropertyMemory()
    {
    }

    /**
     * Test attribute "cgroupParent"
     */
    public function testPropertyCgroupParent()
    {
    }

    /**
     * Test attribute "blkioWeight"
     */
    public function testPropertyBlkioWeight()
    {
    }

    /**
     * Test attribute "blkioWeightDevice"
     */
    public function testPropertyBlkioWeightDevice()
    {
    }

    /**
     * Test attribute "blkioDeviceReadBps"
     */
    public function testPropertyBlkioDeviceReadBps()
    {
    }

    /**
     * Test attribute "blkioDeviceWriteBps"
     */
    public function testPropertyBlkioDeviceWriteBps()
    {
    }

    /**
     * Test attribute "blkioDeviceReadIOps"
     */
    public function testPropertyBlkioDeviceReadIOps()
    {
    }

    /**
     * Test attribute "blkioDeviceWriteIOps"
     */
    public function testPropertyBlkioDeviceWriteIOps()
    {
    }

    /**
     * Test attribute "cpuPeriod"
     */
    public function testPropertyCpuPeriod()
    {
    }

    /**
     * Test attribute "cpuQuota"
     */
    public function testPropertyCpuQuota()
    {
    }

    /**
     * Test attribute "cpuRealtimePeriod"
     */
    public function testPropertyCpuRealtimePeriod()
    {
    }

    /**
     * Test attribute "cpuRealtimeRuntime"
     */
    public function testPropertyCpuRealtimeRuntime()
    {
    }

    /**
     * Test attribute "cpusetCpus"
     */
    public function testPropertyCpusetCpus()
    {
    }

    /**
     * Test attribute "cpusetMems"
     */
    public function testPropertyCpusetMems()
    {
    }

    /**
     * Test attribute "devices"
     */
    public function testPropertyDevices()
    {
    }

    /**
     * Test attribute "deviceCgroupRules"
     */
    public function testPropertyDeviceCgroupRules()
    {
    }

    /**
     * Test attribute "deviceRequests"
     */
    public function testPropertyDeviceRequests()
    {
    }

    /**
     * Test attribute "kernelMemory"
     */
    public function testPropertyKernelMemory()
    {
    }

    /**
     * Test attribute "kernelMemoryTCP"
     */
    public function testPropertyKernelMemoryTCP()
    {
    }

    /**
     * Test attribute "memoryReservation"
     */
    public function testPropertyMemoryReservation()
    {
    }

    /**
     * Test attribute "memorySwap"
     */
    public function testPropertyMemorySwap()
    {
    }

    /**
     * Test attribute "memorySwappiness"
     */
    public function testPropertyMemorySwappiness()
    {
    }

    /**
     * Test attribute "nanoCPUs"
     */
    public function testPropertyNanoCPUs()
    {
    }

    /**
     * Test attribute "oomKillDisable"
     */
    public function testPropertyOomKillDisable()
    {
    }

    /**
     * Test attribute "init"
     */
    public function testPropertyInit()
    {
    }

    /**
     * Test attribute "pidsLimit"
     */
    public function testPropertyPidsLimit()
    {
    }

    /**
     * Test attribute "ulimits"
     */
    public function testPropertyUlimits()
    {
    }

    /**
     * Test attribute "cpuCount"
     */
    public function testPropertyCpuCount()
    {
    }

    /**
     * Test attribute "cpuPercent"
     */
    public function testPropertyCpuPercent()
    {
    }

    /**
     * Test attribute "iOMaximumIOps"
     */
    public function testPropertyIOMaximumIOps()
    {
    }

    /**
     * Test attribute "iOMaximumBandwidth"
     */
    public function testPropertyIOMaximumBandwidth()
    {
    }

    /**
     * Test attribute "binds"
     */
    public function testPropertyBinds()
    {
    }

    /**
     * Test attribute "containerIDFile"
     */
    public function testPropertyContainerIDFile()
    {
    }

    /**
     * Test attribute "logConfig"
     */
    public function testPropertyLogConfig()
    {
    }

    /**
     * Test attribute "networkMode"
     */
    public function testPropertyNetworkMode()
    {
    }

    /**
     * Test attribute "portBindings"
     */
    public function testPropertyPortBindings()
    {
    }

    /**
     * Test attribute "restartPolicy"
     */
    public function testPropertyRestartPolicy()
    {
    }

    /**
     * Test attribute "autoRemove"
     */
    public function testPropertyAutoRemove()
    {
    }

    /**
     * Test attribute "volumeDriver"
     */
    public function testPropertyVolumeDriver()
    {
    }

    /**
     * Test attribute "volumesFrom"
     */
    public function testPropertyVolumesFrom()
    {
    }

    /**
     * Test attribute "mounts"
     */
    public function testPropertyMounts()
    {
    }

    /**
     * Test attribute "capabilities"
     */
    public function testPropertyCapabilities()
    {
    }

    /**
     * Test attribute "capAdd"
     */
    public function testPropertyCapAdd()
    {
    }

    /**
     * Test attribute "capDrop"
     */
    public function testPropertyCapDrop()
    {
    }

    /**
     * Test attribute "dns"
     */
    public function testPropertyDns()
    {
    }

    /**
     * Test attribute "dnsOptions"
     */
    public function testPropertyDnsOptions()
    {
    }

    /**
     * Test attribute "dnsSearch"
     */
    public function testPropertyDnsSearch()
    {
    }

    /**
     * Test attribute "extraHosts"
     */
    public function testPropertyExtraHosts()
    {
    }

    /**
     * Test attribute "groupAdd"
     */
    public function testPropertyGroupAdd()
    {
    }

    /**
     * Test attribute "ipcMode"
     */
    public function testPropertyIpcMode()
    {
    }

    /**
     * Test attribute "cgroup"
     */
    public function testPropertyCgroup()
    {
    }

    /**
     * Test attribute "links"
     */
    public function testPropertyLinks()
    {
    }

    /**
     * Test attribute "oomScoreAdj"
     */
    public function testPropertyOomScoreAdj()
    {
    }

    /**
     * Test attribute "pidMode"
     */
    public function testPropertyPidMode()
    {
    }

    /**
     * Test attribute "privileged"
     */
    public function testPropertyPrivileged()
    {
    }

    /**
     * Test attribute "publishAllPorts"
     */
    public function testPropertyPublishAllPorts()
    {
    }

    /**
     * Test attribute "readonlyRootfs"
     */
    public function testPropertyReadonlyRootfs()
    {
    }

    /**
     * Test attribute "securityOpt"
     */
    public function testPropertySecurityOpt()
    {
    }

    /**
     * Test attribute "storageOpt"
     */
    public function testPropertyStorageOpt()
    {
    }

    /**
     * Test attribute "tmpfs"
     */
    public function testPropertyTmpfs()
    {
    }

    /**
     * Test attribute "uTSMode"
     */
    public function testPropertyUTSMode()
    {
    }

    /**
     * Test attribute "usernsMode"
     */
    public function testPropertyUsernsMode()
    {
    }

    /**
     * Test attribute "shmSize"
     */
    public function testPropertyShmSize()
    {
    }

    /**
     * Test attribute "sysctls"
     */
    public function testPropertySysctls()
    {
    }

    /**
     * Test attribute "runtime"
     */
    public function testPropertyRuntime()
    {
    }

    /**
     * Test attribute "consoleSize"
     */
    public function testPropertyConsoleSize()
    {
    }

    /**
     * Test attribute "isolation"
     */
    public function testPropertyIsolation()
    {
    }

    /**
     * Test attribute "maskedPaths"
     */
    public function testPropertyMaskedPaths()
    {
    }

    /**
     * Test attribute "readonlyPaths"
     */
    public function testPropertyReadonlyPaths()
    {
    }
}
