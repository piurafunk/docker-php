<?php
/**
 * ContainerInspectResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piurafunk\Docker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piurafunk\Docker\Model;

use \ArrayAccess;
use \Piurafunk\Docker\ObjectSerializer;

/**
 * ContainerInspectResponse Class Doc Comment
 *
 * @category Class
 * @package  Piurafunk\Docker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContainerInspectResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContainerInspectResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created' => 'string',
        'path' => 'string',
        'args' => 'string[]',
        'state' => '\Piurafunk\Docker\Model\ContainerState',
        'image' => 'string',
        'resolvConfPath' => 'string',
        'hostnamePath' => 'string',
        'hostsPath' => 'string',
        'logPath' => 'string',
        'node' => 'object',
        'name' => 'string',
        'restartCount' => 'int',
        'driver' => 'string',
        'platform' => 'string',
        'mountLabel' => 'string',
        'processLabel' => 'string',
        'appArmorProfile' => 'string',
        'execIDs' => 'string[]',
        'hostConfig' => '\Piurafunk\Docker\Model\HostConfig',
        'graphDriver' => '\Piurafunk\Docker\Model\GraphDriverData',
        'sizeRw' => 'int',
        'sizeRootFs' => 'int',
        'mounts' => '\Piurafunk\Docker\Model\MountPoint[]',
        'config' => '\Piurafunk\Docker\Model\ContainerConfig',
        'networkSettings' => '\Piurafunk\Docker\Model\NetworkSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created' => null,
        'path' => null,
        'args' => null,
        'state' => null,
        'image' => null,
        'resolvConfPath' => null,
        'hostnamePath' => null,
        'hostsPath' => null,
        'logPath' => null,
        'node' => null,
        'name' => null,
        'restartCount' => null,
        'driver' => null,
        'platform' => null,
        'mountLabel' => null,
        'processLabel' => null,
        'appArmorProfile' => null,
        'execIDs' => null,
        'hostConfig' => null,
        'graphDriver' => null,
        'sizeRw' => 'int64',
        'sizeRootFs' => 'int64',
        'mounts' => null,
        'config' => null,
        'networkSettings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'created' => 'Created',
        'path' => 'Path',
        'args' => 'Args',
        'state' => 'State',
        'image' => 'Image',
        'resolvConfPath' => 'ResolvConfPath',
        'hostnamePath' => 'HostnamePath',
        'hostsPath' => 'HostsPath',
        'logPath' => 'LogPath',
        'node' => 'Node',
        'name' => 'Name',
        'restartCount' => 'RestartCount',
        'driver' => 'Driver',
        'platform' => 'Platform',
        'mountLabel' => 'MountLabel',
        'processLabel' => 'ProcessLabel',
        'appArmorProfile' => 'AppArmorProfile',
        'execIDs' => 'ExecIDs',
        'hostConfig' => 'HostConfig',
        'graphDriver' => 'GraphDriver',
        'sizeRw' => 'SizeRw',
        'sizeRootFs' => 'SizeRootFs',
        'mounts' => 'Mounts',
        'config' => 'Config',
        'networkSettings' => 'NetworkSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'path' => 'setPath',
        'args' => 'setArgs',
        'state' => 'setState',
        'image' => 'setImage',
        'resolvConfPath' => 'setResolvConfPath',
        'hostnamePath' => 'setHostnamePath',
        'hostsPath' => 'setHostsPath',
        'logPath' => 'setLogPath',
        'node' => 'setNode',
        'name' => 'setName',
        'restartCount' => 'setRestartCount',
        'driver' => 'setDriver',
        'platform' => 'setPlatform',
        'mountLabel' => 'setMountLabel',
        'processLabel' => 'setProcessLabel',
        'appArmorProfile' => 'setAppArmorProfile',
        'execIDs' => 'setExecIDs',
        'hostConfig' => 'setHostConfig',
        'graphDriver' => 'setGraphDriver',
        'sizeRw' => 'setSizeRw',
        'sizeRootFs' => 'setSizeRootFs',
        'mounts' => 'setMounts',
        'config' => 'setConfig',
        'networkSettings' => 'setNetworkSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'path' => 'getPath',
        'args' => 'getArgs',
        'state' => 'getState',
        'image' => 'getImage',
        'resolvConfPath' => 'getResolvConfPath',
        'hostnamePath' => 'getHostnamePath',
        'hostsPath' => 'getHostsPath',
        'logPath' => 'getLogPath',
        'node' => 'getNode',
        'name' => 'getName',
        'restartCount' => 'getRestartCount',
        'driver' => 'getDriver',
        'platform' => 'getPlatform',
        'mountLabel' => 'getMountLabel',
        'processLabel' => 'getProcessLabel',
        'appArmorProfile' => 'getAppArmorProfile',
        'execIDs' => 'getExecIDs',
        'hostConfig' => 'getHostConfig',
        'graphDriver' => 'getGraphDriver',
        'sizeRw' => 'getSizeRw',
        'sizeRootFs' => 'getSizeRootFs',
        'mounts' => 'getMounts',
        'config' => 'getConfig',
        'networkSettings' => 'getNetworkSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['args'] = isset($data['args']) ? $data['args'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['resolvConfPath'] = isset($data['resolvConfPath']) ? $data['resolvConfPath'] : null;
        $this->container['hostnamePath'] = isset($data['hostnamePath']) ? $data['hostnamePath'] : null;
        $this->container['hostsPath'] = isset($data['hostsPath']) ? $data['hostsPath'] : null;
        $this->container['logPath'] = isset($data['logPath']) ? $data['logPath'] : null;
        $this->container['node'] = isset($data['node']) ? $data['node'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['restartCount'] = isset($data['restartCount']) ? $data['restartCount'] : null;
        $this->container['driver'] = isset($data['driver']) ? $data['driver'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['mountLabel'] = isset($data['mountLabel']) ? $data['mountLabel'] : null;
        $this->container['processLabel'] = isset($data['processLabel']) ? $data['processLabel'] : null;
        $this->container['appArmorProfile'] = isset($data['appArmorProfile']) ? $data['appArmorProfile'] : null;
        $this->container['execIDs'] = isset($data['execIDs']) ? $data['execIDs'] : null;
        $this->container['hostConfig'] = isset($data['hostConfig']) ? $data['hostConfig'] : null;
        $this->container['graphDriver'] = isset($data['graphDriver']) ? $data['graphDriver'] : null;
        $this->container['sizeRw'] = isset($data['sizeRw']) ? $data['sizeRw'] : null;
        $this->container['sizeRootFs'] = isset($data['sizeRootFs']) ? $data['sizeRootFs'] : null;
        $this->container['mounts'] = isset($data['mounts']) ? $data['mounts'] : null;
        $this->container['config'] = isset($data['config']) ? $data['config'] : null;
        $this->container['networkSettings'] = isset($data['networkSettings']) ? $data['networkSettings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of the container
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string|null $created The time the container was created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path The path to the command being run
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets args
     *
     * @return string[]|null
     */
    public function getArgs()
    {
        return $this->container['args'];
    }

    /**
     * Sets args
     *
     * @param string[]|null $args The arguments to the command being run
     *
     * @return $this
     */
    public function setArgs($args)
    {
        $this->container['args'] = $args;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \Piurafunk\Docker\Model\ContainerState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \Piurafunk\Docker\Model\ContainerState|null $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image The container's image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets resolvConfPath
     *
     * @return string|null
     */
    public function getResolvConfPath()
    {
        return $this->container['resolvConfPath'];
    }

    /**
     * Sets resolvConfPath
     *
     * @param string|null $resolvConfPath resolvConfPath
     *
     * @return $this
     */
    public function setResolvConfPath($resolvConfPath)
    {
        $this->container['resolvConfPath'] = $resolvConfPath;

        return $this;
    }

    /**
     * Gets hostnamePath
     *
     * @return string|null
     */
    public function getHostnamePath()
    {
        return $this->container['hostnamePath'];
    }

    /**
     * Sets hostnamePath
     *
     * @param string|null $hostnamePath hostnamePath
     *
     * @return $this
     */
    public function setHostnamePath($hostnamePath)
    {
        $this->container['hostnamePath'] = $hostnamePath;

        return $this;
    }

    /**
     * Gets hostsPath
     *
     * @return string|null
     */
    public function getHostsPath()
    {
        return $this->container['hostsPath'];
    }

    /**
     * Sets hostsPath
     *
     * @param string|null $hostsPath hostsPath
     *
     * @return $this
     */
    public function setHostsPath($hostsPath)
    {
        $this->container['hostsPath'] = $hostsPath;

        return $this;
    }

    /**
     * Gets logPath
     *
     * @return string|null
     */
    public function getLogPath()
    {
        return $this->container['logPath'];
    }

    /**
     * Sets logPath
     *
     * @param string|null $logPath logPath
     *
     * @return $this
     */
    public function setLogPath($logPath)
    {
        $this->container['logPath'] = $logPath;

        return $this;
    }

    /**
     * Gets node
     *
     * @return object|null
     */
    public function getNode()
    {
        return $this->container['node'];
    }

    /**
     * Sets node
     *
     * @param object|null $node TODO
     *
     * @return $this
     */
    public function setNode($node)
    {
        $this->container['node'] = $node;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets restartCount
     *
     * @return int|null
     */
    public function getRestartCount()
    {
        return $this->container['restartCount'];
    }

    /**
     * Sets restartCount
     *
     * @param int|null $restartCount restartCount
     *
     * @return $this
     */
    public function setRestartCount($restartCount)
    {
        $this->container['restartCount'] = $restartCount;

        return $this;
    }

    /**
     * Gets driver
     *
     * @return string|null
     */
    public function getDriver()
    {
        return $this->container['driver'];
    }

    /**
     * Sets driver
     *
     * @param string|null $driver driver
     *
     * @return $this
     */
    public function setDriver($driver)
    {
        $this->container['driver'] = $driver;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string|null
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string|null $platform platform
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets mountLabel
     *
     * @return string|null
     */
    public function getMountLabel()
    {
        return $this->container['mountLabel'];
    }

    /**
     * Sets mountLabel
     *
     * @param string|null $mountLabel mountLabel
     *
     * @return $this
     */
    public function setMountLabel($mountLabel)
    {
        $this->container['mountLabel'] = $mountLabel;

        return $this;
    }

    /**
     * Gets processLabel
     *
     * @return string|null
     */
    public function getProcessLabel()
    {
        return $this->container['processLabel'];
    }

    /**
     * Sets processLabel
     *
     * @param string|null $processLabel processLabel
     *
     * @return $this
     */
    public function setProcessLabel($processLabel)
    {
        $this->container['processLabel'] = $processLabel;

        return $this;
    }

    /**
     * Gets appArmorProfile
     *
     * @return string|null
     */
    public function getAppArmorProfile()
    {
        return $this->container['appArmorProfile'];
    }

    /**
     * Sets appArmorProfile
     *
     * @param string|null $appArmorProfile appArmorProfile
     *
     * @return $this
     */
    public function setAppArmorProfile($appArmorProfile)
    {
        $this->container['appArmorProfile'] = $appArmorProfile;

        return $this;
    }

    /**
     * Gets execIDs
     *
     * @return string[]|null
     */
    public function getExecIDs()
    {
        return $this->container['execIDs'];
    }

    /**
     * Sets execIDs
     *
     * @param string[]|null $execIDs IDs of exec instances that are running in the container.
     *
     * @return $this
     */
    public function setExecIDs($execIDs)
    {
        $this->container['execIDs'] = $execIDs;

        return $this;
    }

    /**
     * Gets hostConfig
     *
     * @return \Piurafunk\Docker\Model\HostConfig|null
     */
    public function getHostConfig()
    {
        return $this->container['hostConfig'];
    }

    /**
     * Sets hostConfig
     *
     * @param \Piurafunk\Docker\Model\HostConfig|null $hostConfig hostConfig
     *
     * @return $this
     */
    public function setHostConfig($hostConfig)
    {
        $this->container['hostConfig'] = $hostConfig;

        return $this;
    }

    /**
     * Gets graphDriver
     *
     * @return \Piurafunk\Docker\Model\GraphDriverData|null
     */
    public function getGraphDriver()
    {
        return $this->container['graphDriver'];
    }

    /**
     * Sets graphDriver
     *
     * @param \Piurafunk\Docker\Model\GraphDriverData|null $graphDriver graphDriver
     *
     * @return $this
     */
    public function setGraphDriver($graphDriver)
    {
        $this->container['graphDriver'] = $graphDriver;

        return $this;
    }

    /**
     * Gets sizeRw
     *
     * @return int|null
     */
    public function getSizeRw()
    {
        return $this->container['sizeRw'];
    }

    /**
     * Sets sizeRw
     *
     * @param int|null $sizeRw The size of files that have been created or changed by this container.
     *
     * @return $this
     */
    public function setSizeRw($sizeRw)
    {
        $this->container['sizeRw'] = $sizeRw;

        return $this;
    }

    /**
     * Gets sizeRootFs
     *
     * @return int|null
     */
    public function getSizeRootFs()
    {
        return $this->container['sizeRootFs'];
    }

    /**
     * Sets sizeRootFs
     *
     * @param int|null $sizeRootFs The total size of all the files in this container.
     *
     * @return $this
     */
    public function setSizeRootFs($sizeRootFs)
    {
        $this->container['sizeRootFs'] = $sizeRootFs;

        return $this;
    }

    /**
     * Gets mounts
     *
     * @return \Piurafunk\Docker\Model\MountPoint[]|null
     */
    public function getMounts()
    {
        return $this->container['mounts'];
    }

    /**
     * Sets mounts
     *
     * @param \Piurafunk\Docker\Model\MountPoint[]|null $mounts mounts
     *
     * @return $this
     */
    public function setMounts($mounts)
    {
        $this->container['mounts'] = $mounts;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \Piurafunk\Docker\Model\ContainerConfig|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \Piurafunk\Docker\Model\ContainerConfig|null $config config
     *
     * @return $this
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets networkSettings
     *
     * @return \Piurafunk\Docker\Model\NetworkSettings|null
     */
    public function getNetworkSettings()
    {
        return $this->container['networkSettings'];
    }

    /**
     * Sets networkSettings
     *
     * @param \Piurafunk\Docker\Model\NetworkSettings|null $networkSettings networkSettings
     *
     * @return $this
     */
    public function setNetworkSettings($networkSettings)
    {
        $this->container['networkSettings'] = $networkSettings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


