<?php
/**
 * EndpointSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piurafunk\Docker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piurafunk\Docker\Model;

use \ArrayAccess;
use \Piurafunk\Docker\ObjectSerializer;

/**
 * EndpointSettings Class Doc Comment
 *
 * @category Class
 * @description Configuration for a network endpoint.
 * @package  Piurafunk\Docker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EndpointSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EndpointSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'iPAMConfig' => '\Piurafunk\Docker\Model\EndpointIPAMConfig',
        'links' => 'string[]',
        'aliases' => 'string[]',
        'networkID' => 'string',
        'endpointID' => 'string',
        'gateway' => 'string',
        'iPAddress' => 'string',
        'iPPrefixLen' => 'int',
        'iPv6Gateway' => 'string',
        'globalIPv6Address' => 'string',
        'globalIPv6PrefixLen' => 'int',
        'macAddress' => 'string',
        'driverOpts' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'iPAMConfig' => null,
        'links' => null,
        'aliases' => null,
        'networkID' => null,
        'endpointID' => null,
        'gateway' => null,
        'iPAddress' => null,
        'iPPrefixLen' => null,
        'iPv6Gateway' => null,
        'globalIPv6Address' => null,
        'globalIPv6PrefixLen' => 'int64',
        'macAddress' => null,
        'driverOpts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'iPAMConfig' => 'IPAMConfig',
        'links' => 'Links',
        'aliases' => 'Aliases',
        'networkID' => 'NetworkID',
        'endpointID' => 'EndpointID',
        'gateway' => 'Gateway',
        'iPAddress' => 'IPAddress',
        'iPPrefixLen' => 'IPPrefixLen',
        'iPv6Gateway' => 'IPv6Gateway',
        'globalIPv6Address' => 'GlobalIPv6Address',
        'globalIPv6PrefixLen' => 'GlobalIPv6PrefixLen',
        'macAddress' => 'MacAddress',
        'driverOpts' => 'DriverOpts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'iPAMConfig' => 'setIPAMConfig',
        'links' => 'setLinks',
        'aliases' => 'setAliases',
        'networkID' => 'setNetworkID',
        'endpointID' => 'setEndpointID',
        'gateway' => 'setGateway',
        'iPAddress' => 'setIPAddress',
        'iPPrefixLen' => 'setIPPrefixLen',
        'iPv6Gateway' => 'setIPv6Gateway',
        'globalIPv6Address' => 'setGlobalIPv6Address',
        'globalIPv6PrefixLen' => 'setGlobalIPv6PrefixLen',
        'macAddress' => 'setMacAddress',
        'driverOpts' => 'setDriverOpts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'iPAMConfig' => 'getIPAMConfig',
        'links' => 'getLinks',
        'aliases' => 'getAliases',
        'networkID' => 'getNetworkID',
        'endpointID' => 'getEndpointID',
        'gateway' => 'getGateway',
        'iPAddress' => 'getIPAddress',
        'iPPrefixLen' => 'getIPPrefixLen',
        'iPv6Gateway' => 'getIPv6Gateway',
        'globalIPv6Address' => 'getGlobalIPv6Address',
        'globalIPv6PrefixLen' => 'getGlobalIPv6PrefixLen',
        'macAddress' => 'getMacAddress',
        'driverOpts' => 'getDriverOpts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['iPAMConfig'] = isset($data['iPAMConfig']) ? $data['iPAMConfig'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['aliases'] = isset($data['aliases']) ? $data['aliases'] : null;
        $this->container['networkID'] = isset($data['networkID']) ? $data['networkID'] : null;
        $this->container['endpointID'] = isset($data['endpointID']) ? $data['endpointID'] : null;
        $this->container['gateway'] = isset($data['gateway']) ? $data['gateway'] : null;
        $this->container['iPAddress'] = isset($data['iPAddress']) ? $data['iPAddress'] : null;
        $this->container['iPPrefixLen'] = isset($data['iPPrefixLen']) ? $data['iPPrefixLen'] : null;
        $this->container['iPv6Gateway'] = isset($data['iPv6Gateway']) ? $data['iPv6Gateway'] : null;
        $this->container['globalIPv6Address'] = isset($data['globalIPv6Address']) ? $data['globalIPv6Address'] : null;
        $this->container['globalIPv6PrefixLen'] = isset($data['globalIPv6PrefixLen']) ? $data['globalIPv6PrefixLen'] : null;
        $this->container['macAddress'] = isset($data['macAddress']) ? $data['macAddress'] : null;
        $this->container['driverOpts'] = isset($data['driverOpts']) ? $data['driverOpts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets iPAMConfig
     *
     * @return \Piurafunk\Docker\Model\EndpointIPAMConfig|null
     */
    public function getIPAMConfig()
    {
        return $this->container['iPAMConfig'];
    }

    /**
     * Sets iPAMConfig
     *
     * @param \Piurafunk\Docker\Model\EndpointIPAMConfig|null $iPAMConfig iPAMConfig
     *
     * @return $this
     */
    public function setIPAMConfig($iPAMConfig)
    {
        $this->container['iPAMConfig'] = $iPAMConfig;

        return $this;
    }

    /**
     * Gets links
     *
     * @return string[]|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param string[]|null $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets aliases
     *
     * @return string[]|null
     */
    public function getAliases()
    {
        return $this->container['aliases'];
    }

    /**
     * Sets aliases
     *
     * @param string[]|null $aliases aliases
     *
     * @return $this
     */
    public function setAliases($aliases)
    {
        $this->container['aliases'] = $aliases;

        return $this;
    }

    /**
     * Gets networkID
     *
     * @return string|null
     */
    public function getNetworkID()
    {
        return $this->container['networkID'];
    }

    /**
     * Sets networkID
     *
     * @param string|null $networkID Unique ID of the network.
     *
     * @return $this
     */
    public function setNetworkID($networkID)
    {
        $this->container['networkID'] = $networkID;

        return $this;
    }

    /**
     * Gets endpointID
     *
     * @return string|null
     */
    public function getEndpointID()
    {
        return $this->container['endpointID'];
    }

    /**
     * Sets endpointID
     *
     * @param string|null $endpointID Unique ID for the service endpoint in a Sandbox.
     *
     * @return $this
     */
    public function setEndpointID($endpointID)
    {
        $this->container['endpointID'] = $endpointID;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string|null
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string|null $gateway Gateway address for this network.
     *
     * @return $this
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets iPAddress
     *
     * @return string|null
     */
    public function getIPAddress()
    {
        return $this->container['iPAddress'];
    }

    /**
     * Sets iPAddress
     *
     * @param string|null $iPAddress IPv4 address.
     *
     * @return $this
     */
    public function setIPAddress($iPAddress)
    {
        $this->container['iPAddress'] = $iPAddress;

        return $this;
    }

    /**
     * Gets iPPrefixLen
     *
     * @return int|null
     */
    public function getIPPrefixLen()
    {
        return $this->container['iPPrefixLen'];
    }

    /**
     * Sets iPPrefixLen
     *
     * @param int|null $iPPrefixLen Mask length of the IPv4 address.
     *
     * @return $this
     */
    public function setIPPrefixLen($iPPrefixLen)
    {
        $this->container['iPPrefixLen'] = $iPPrefixLen;

        return $this;
    }

    /**
     * Gets iPv6Gateway
     *
     * @return string|null
     */
    public function getIPv6Gateway()
    {
        return $this->container['iPv6Gateway'];
    }

    /**
     * Sets iPv6Gateway
     *
     * @param string|null $iPv6Gateway IPv6 gateway address.
     *
     * @return $this
     */
    public function setIPv6Gateway($iPv6Gateway)
    {
        $this->container['iPv6Gateway'] = $iPv6Gateway;

        return $this;
    }

    /**
     * Gets globalIPv6Address
     *
     * @return string|null
     */
    public function getGlobalIPv6Address()
    {
        return $this->container['globalIPv6Address'];
    }

    /**
     * Sets globalIPv6Address
     *
     * @param string|null $globalIPv6Address Global IPv6 address.
     *
     * @return $this
     */
    public function setGlobalIPv6Address($globalIPv6Address)
    {
        $this->container['globalIPv6Address'] = $globalIPv6Address;

        return $this;
    }

    /**
     * Gets globalIPv6PrefixLen
     *
     * @return int|null
     */
    public function getGlobalIPv6PrefixLen()
    {
        return $this->container['globalIPv6PrefixLen'];
    }

    /**
     * Sets globalIPv6PrefixLen
     *
     * @param int|null $globalIPv6PrefixLen Mask length of the global IPv6 address.
     *
     * @return $this
     */
    public function setGlobalIPv6PrefixLen($globalIPv6PrefixLen)
    {
        $this->container['globalIPv6PrefixLen'] = $globalIPv6PrefixLen;

        return $this;
    }

    /**
     * Gets macAddress
     *
     * @return string|null
     */
    public function getMacAddress()
    {
        return $this->container['macAddress'];
    }

    /**
     * Sets macAddress
     *
     * @param string|null $macAddress MAC address for the endpoint on this network.
     *
     * @return $this
     */
    public function setMacAddress($macAddress)
    {
        $this->container['macAddress'] = $macAddress;

        return $this;
    }

    /**
     * Gets driverOpts
     *
     * @return map[string,string]|null
     */
    public function getDriverOpts()
    {
        return $this->container['driverOpts'];
    }

    /**
     * Sets driverOpts
     *
     * @param map[string,string]|null $driverOpts DriverOpts is a mapping of driver options and values. These options are passed directly to the driver and are driver specific.
     *
     * @return $this
     */
    public function setDriverOpts($driverOpts)
    {
        $this->container['driverOpts'] = $driverOpts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


