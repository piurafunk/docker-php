<?php
/**
 * TaskSpecContainerSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piurafunk\Docker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piurafunk\Docker\Model;

use \ArrayAccess;
use \Piurafunk\Docker\ObjectSerializer;

/**
 * TaskSpecContainerSpec Class Doc Comment
 *
 * @category Class
 * @description Container spec for the service.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are &gt; mutually exclusive. PluginSpec is only used when the Runtime field &gt; is set to &#x60;plugin&#x60;. NetworkAttachmentSpec is used when the Runtime &gt; field is set to &#x60;attachment&#x60;.
 * @package  Piurafunk\Docker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TaskSpecContainerSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaskSpec_ContainerSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'image' => 'string',
        'labels' => 'map[string,string]',
        'command' => 'string[]',
        'args' => 'string[]',
        'hostname' => 'string',
        'env' => 'string[]',
        'dir' => 'string',
        'user' => 'string',
        'groups' => 'string[]',
        'privileges' => '\Piurafunk\Docker\Model\TaskSpecContainerSpecPrivileges',
        'tTY' => 'bool',
        'openStdin' => 'bool',
        'readOnly' => 'bool',
        'mounts' => '\Piurafunk\Docker\Model\Mount[]',
        'stopSignal' => 'string',
        'stopGracePeriod' => 'int',
        'healthCheck' => '\Piurafunk\Docker\Model\HealthConfig',
        'hosts' => 'string[]',
        'dNSConfig' => '\Piurafunk\Docker\Model\TaskSpecContainerSpecDNSConfig',
        'secrets' => '\Piurafunk\Docker\Model\TaskSpecContainerSpecSecrets[]',
        'configs' => '\Piurafunk\Docker\Model\TaskSpecContainerSpecConfigs[]',
        'isolation' => 'string',
        'init' => 'bool',
        'sysctls' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'image' => null,
        'labels' => null,
        'command' => null,
        'args' => null,
        'hostname' => null,
        'env' => null,
        'dir' => null,
        'user' => null,
        'groups' => null,
        'privileges' => null,
        'tTY' => null,
        'openStdin' => null,
        'readOnly' => null,
        'mounts' => null,
        'stopSignal' => null,
        'stopGracePeriod' => 'int64',
        'healthCheck' => null,
        'hosts' => null,
        'dNSConfig' => null,
        'secrets' => null,
        'configs' => null,
        'isolation' => null,
        'init' => null,
        'sysctls' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'image' => 'Image',
        'labels' => 'Labels',
        'command' => 'Command',
        'args' => 'Args',
        'hostname' => 'Hostname',
        'env' => 'Env',
        'dir' => 'Dir',
        'user' => 'User',
        'groups' => 'Groups',
        'privileges' => 'Privileges',
        'tTY' => 'TTY',
        'openStdin' => 'OpenStdin',
        'readOnly' => 'ReadOnly',
        'mounts' => 'Mounts',
        'stopSignal' => 'StopSignal',
        'stopGracePeriod' => 'StopGracePeriod',
        'healthCheck' => 'HealthCheck',
        'hosts' => 'Hosts',
        'dNSConfig' => 'DNSConfig',
        'secrets' => 'Secrets',
        'configs' => 'Configs',
        'isolation' => 'Isolation',
        'init' => 'Init',
        'sysctls' => 'Sysctls'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'image' => 'setImage',
        'labels' => 'setLabels',
        'command' => 'setCommand',
        'args' => 'setArgs',
        'hostname' => 'setHostname',
        'env' => 'setEnv',
        'dir' => 'setDir',
        'user' => 'setUser',
        'groups' => 'setGroups',
        'privileges' => 'setPrivileges',
        'tTY' => 'setTTY',
        'openStdin' => 'setOpenStdin',
        'readOnly' => 'setReadOnly',
        'mounts' => 'setMounts',
        'stopSignal' => 'setStopSignal',
        'stopGracePeriod' => 'setStopGracePeriod',
        'healthCheck' => 'setHealthCheck',
        'hosts' => 'setHosts',
        'dNSConfig' => 'setDNSConfig',
        'secrets' => 'setSecrets',
        'configs' => 'setConfigs',
        'isolation' => 'setIsolation',
        'init' => 'setInit',
        'sysctls' => 'setSysctls'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'image' => 'getImage',
        'labels' => 'getLabels',
        'command' => 'getCommand',
        'args' => 'getArgs',
        'hostname' => 'getHostname',
        'env' => 'getEnv',
        'dir' => 'getDir',
        'user' => 'getUser',
        'groups' => 'getGroups',
        'privileges' => 'getPrivileges',
        'tTY' => 'getTTY',
        'openStdin' => 'getOpenStdin',
        'readOnly' => 'getReadOnly',
        'mounts' => 'getMounts',
        'stopSignal' => 'getStopSignal',
        'stopGracePeriod' => 'getStopGracePeriod',
        'healthCheck' => 'getHealthCheck',
        'hosts' => 'getHosts',
        'dNSConfig' => 'getDNSConfig',
        'secrets' => 'getSecrets',
        'configs' => 'getConfigs',
        'isolation' => 'getIsolation',
        'init' => 'getInit',
        'sysctls' => 'getSysctls'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ISOLATION__DEFAULT = 'default';
    const ISOLATION_PROCESS = 'process';
    const ISOLATION_HYPERV = 'hyperv';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsolationAllowableValues()
    {
        return [
            self::ISOLATION__DEFAULT,
            self::ISOLATION_PROCESS,
            self::ISOLATION_HYPERV,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['command'] = isset($data['command']) ? $data['command'] : null;
        $this->container['args'] = isset($data['args']) ? $data['args'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['env'] = isset($data['env']) ? $data['env'] : null;
        $this->container['dir'] = isset($data['dir']) ? $data['dir'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['privileges'] = isset($data['privileges']) ? $data['privileges'] : null;
        $this->container['tTY'] = isset($data['tTY']) ? $data['tTY'] : null;
        $this->container['openStdin'] = isset($data['openStdin']) ? $data['openStdin'] : null;
        $this->container['readOnly'] = isset($data['readOnly']) ? $data['readOnly'] : null;
        $this->container['mounts'] = isset($data['mounts']) ? $data['mounts'] : null;
        $this->container['stopSignal'] = isset($data['stopSignal']) ? $data['stopSignal'] : null;
        $this->container['stopGracePeriod'] = isset($data['stopGracePeriod']) ? $data['stopGracePeriod'] : null;
        $this->container['healthCheck'] = isset($data['healthCheck']) ? $data['healthCheck'] : null;
        $this->container['hosts'] = isset($data['hosts']) ? $data['hosts'] : null;
        $this->container['dNSConfig'] = isset($data['dNSConfig']) ? $data['dNSConfig'] : null;
        $this->container['secrets'] = isset($data['secrets']) ? $data['secrets'] : null;
        $this->container['configs'] = isset($data['configs']) ? $data['configs'] : null;
        $this->container['isolation'] = isset($data['isolation']) ? $data['isolation'] : null;
        $this->container['init'] = isset($data['init']) ? $data['init'] : null;
        $this->container['sysctls'] = isset($data['sysctls']) ? $data['sysctls'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIsolationAllowableValues();
        if (!is_null($this->container['isolation']) && !in_array($this->container['isolation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'isolation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image The image name to use for the container
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return map[string,string]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param map[string,string]|null $labels User-defined key/value data.
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets command
     *
     * @return string[]|null
     */
    public function getCommand()
    {
        return $this->container['command'];
    }

    /**
     * Sets command
     *
     * @param string[]|null $command The command to be run in the image.
     *
     * @return $this
     */
    public function setCommand($command)
    {
        $this->container['command'] = $command;

        return $this;
    }

    /**
     * Gets args
     *
     * @return string[]|null
     */
    public function getArgs()
    {
        return $this->container['args'];
    }

    /**
     * Sets args
     *
     * @param string[]|null $args Arguments to the command.
     *
     * @return $this
     */
    public function setArgs($args)
    {
        $this->container['args'] = $args;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string|null
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string|null $hostname The hostname to use for the container, as a valid RFC 1123 hostname.
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets env
     *
     * @return string[]|null
     */
    public function getEnv()
    {
        return $this->container['env'];
    }

    /**
     * Sets env
     *
     * @param string[]|null $env A list of environment variables in the form `VAR=value`.
     *
     * @return $this
     */
    public function setEnv($env)
    {
        $this->container['env'] = $env;

        return $this;
    }

    /**
     * Gets dir
     *
     * @return string|null
     */
    public function getDir()
    {
        return $this->container['dir'];
    }

    /**
     * Sets dir
     *
     * @param string|null $dir The working directory for commands to run in.
     *
     * @return $this
     */
    public function setDir($dir)
    {
        $this->container['dir'] = $dir;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user The user inside the container.
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return string[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param string[]|null $groups A list of additional groups that the container process will run as.
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets privileges
     *
     * @return \Piurafunk\Docker\Model\TaskSpecContainerSpecPrivileges|null
     */
    public function getPrivileges()
    {
        return $this->container['privileges'];
    }

    /**
     * Sets privileges
     *
     * @param \Piurafunk\Docker\Model\TaskSpecContainerSpecPrivileges|null $privileges privileges
     *
     * @return $this
     */
    public function setPrivileges($privileges)
    {
        $this->container['privileges'] = $privileges;

        return $this;
    }

    /**
     * Gets tTY
     *
     * @return bool|null
     */
    public function getTTY()
    {
        return $this->container['tTY'];
    }

    /**
     * Sets tTY
     *
     * @param bool|null $tTY Whether a pseudo-TTY should be allocated.
     *
     * @return $this
     */
    public function setTTY($tTY)
    {
        $this->container['tTY'] = $tTY;

        return $this;
    }

    /**
     * Gets openStdin
     *
     * @return bool|null
     */
    public function getOpenStdin()
    {
        return $this->container['openStdin'];
    }

    /**
     * Sets openStdin
     *
     * @param bool|null $openStdin Open `stdin`
     *
     * @return $this
     */
    public function setOpenStdin($openStdin)
    {
        $this->container['openStdin'] = $openStdin;

        return $this;
    }

    /**
     * Gets readOnly
     *
     * @return bool|null
     */
    public function getReadOnly()
    {
        return $this->container['readOnly'];
    }

    /**
     * Sets readOnly
     *
     * @param bool|null $readOnly Mount the container's root filesystem as read only.
     *
     * @return $this
     */
    public function setReadOnly($readOnly)
    {
        $this->container['readOnly'] = $readOnly;

        return $this;
    }

    /**
     * Gets mounts
     *
     * @return \Piurafunk\Docker\Model\Mount[]|null
     */
    public function getMounts()
    {
        return $this->container['mounts'];
    }

    /**
     * Sets mounts
     *
     * @param \Piurafunk\Docker\Model\Mount[]|null $mounts Specification for mounts to be added to containers created as part of the service.
     *
     * @return $this
     */
    public function setMounts($mounts)
    {
        $this->container['mounts'] = $mounts;

        return $this;
    }

    /**
     * Gets stopSignal
     *
     * @return string|null
     */
    public function getStopSignal()
    {
        return $this->container['stopSignal'];
    }

    /**
     * Sets stopSignal
     *
     * @param string|null $stopSignal Signal to stop the container.
     *
     * @return $this
     */
    public function setStopSignal($stopSignal)
    {
        $this->container['stopSignal'] = $stopSignal;

        return $this;
    }

    /**
     * Gets stopGracePeriod
     *
     * @return int|null
     */
    public function getStopGracePeriod()
    {
        return $this->container['stopGracePeriod'];
    }

    /**
     * Sets stopGracePeriod
     *
     * @param int|null $stopGracePeriod Amount of time to wait for the container to terminate before forcefully killing it.
     *
     * @return $this
     */
    public function setStopGracePeriod($stopGracePeriod)
    {
        $this->container['stopGracePeriod'] = $stopGracePeriod;

        return $this;
    }

    /**
     * Gets healthCheck
     *
     * @return \Piurafunk\Docker\Model\HealthConfig|null
     */
    public function getHealthCheck()
    {
        return $this->container['healthCheck'];
    }

    /**
     * Sets healthCheck
     *
     * @param \Piurafunk\Docker\Model\HealthConfig|null $healthCheck healthCheck
     *
     * @return $this
     */
    public function setHealthCheck($healthCheck)
    {
        $this->container['healthCheck'] = $healthCheck;

        return $this;
    }

    /**
     * Gets hosts
     *
     * @return string[]|null
     */
    public function getHosts()
    {
        return $this->container['hosts'];
    }

    /**
     * Sets hosts
     *
     * @param string[]|null $hosts A list of hostname/IP mappings to add to the container's `hosts` file. The format of extra hosts is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address canonical_hostname [aliases...]
     *
     * @return $this
     */
    public function setHosts($hosts)
    {
        $this->container['hosts'] = $hosts;

        return $this;
    }

    /**
     * Gets dNSConfig
     *
     * @return \Piurafunk\Docker\Model\TaskSpecContainerSpecDNSConfig|null
     */
    public function getDNSConfig()
    {
        return $this->container['dNSConfig'];
    }

    /**
     * Sets dNSConfig
     *
     * @param \Piurafunk\Docker\Model\TaskSpecContainerSpecDNSConfig|null $dNSConfig dNSConfig
     *
     * @return $this
     */
    public function setDNSConfig($dNSConfig)
    {
        $this->container['dNSConfig'] = $dNSConfig;

        return $this;
    }

    /**
     * Gets secrets
     *
     * @return \Piurafunk\Docker\Model\TaskSpecContainerSpecSecrets[]|null
     */
    public function getSecrets()
    {
        return $this->container['secrets'];
    }

    /**
     * Sets secrets
     *
     * @param \Piurafunk\Docker\Model\TaskSpecContainerSpecSecrets[]|null $secrets Secrets contains references to zero or more secrets that will be exposed to the service.
     *
     * @return $this
     */
    public function setSecrets($secrets)
    {
        $this->container['secrets'] = $secrets;

        return $this;
    }

    /**
     * Gets configs
     *
     * @return \Piurafunk\Docker\Model\TaskSpecContainerSpecConfigs[]|null
     */
    public function getConfigs()
    {
        return $this->container['configs'];
    }

    /**
     * Sets configs
     *
     * @param \Piurafunk\Docker\Model\TaskSpecContainerSpecConfigs[]|null $configs Configs contains references to zero or more configs that will be exposed to the service.
     *
     * @return $this
     */
    public function setConfigs($configs)
    {
        $this->container['configs'] = $configs;

        return $this;
    }

    /**
     * Gets isolation
     *
     * @return string|null
     */
    public function getIsolation()
    {
        return $this->container['isolation'];
    }

    /**
     * Sets isolation
     *
     * @param string|null $isolation Isolation technology of the containers running the service. (Windows only)
     *
     * @return $this
     */
    public function setIsolation($isolation)
    {
        $allowedValues = $this->getIsolationAllowableValues();
        if (!is_null($isolation) && !in_array($isolation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'isolation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['isolation'] = $isolation;

        return $this;
    }

    /**
     * Gets init
     *
     * @return bool|null
     */
    public function getInit()
    {
        return $this->container['init'];
    }

    /**
     * Sets init
     *
     * @param bool|null $init Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.
     *
     * @return $this
     */
    public function setInit($init)
    {
        $this->container['init'] = $init;

        return $this;
    }

    /**
     * Gets sysctls
     *
     * @return map[string,string]|null
     */
    public function getSysctls()
    {
        return $this->container['sysctls'];
    }

    /**
     * Sets sysctls
     *
     * @param map[string,string]|null $sysctls Set kernel namedspaced parameters (sysctls) in the container. The Sysctls option on services accepts the same sysctls as the are supported on containers. Note that while the same sysctls are supported, no guarantees or checks are made about their suitability for a clustered environment, and it's up to the user to determine whether a given sysctl will work properly in a Service.
     *
     * @return $this
     */
    public function setSysctls($sysctls)
    {
        $this->container['sysctls'] = $sysctls;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


