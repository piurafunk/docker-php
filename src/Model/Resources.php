<?php
/**
 * Resources
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piurafunk\Docker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piurafunk\Docker\Model;

use \ArrayAccess;
use \Piurafunk\Docker\ObjectSerializer;

/**
 * Resources Class Doc Comment
 *
 * @category Class
 * @description A container&#39;s resources (cgroups config, ulimits, etc)
 * @package  Piurafunk\Docker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Resources implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Resources';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cpuShares' => 'int',
        'memory' => 'int',
        'cgroupParent' => 'string',
        'blkioWeight' => 'int',
        'blkioWeightDevice' => '\Piurafunk\Docker\Model\ResourcesBlkioWeightDevice[]',
        'blkioDeviceReadBps' => '\Piurafunk\Docker\Model\ThrottleDevice[]',
        'blkioDeviceWriteBps' => '\Piurafunk\Docker\Model\ThrottleDevice[]',
        'blkioDeviceReadIOps' => '\Piurafunk\Docker\Model\ThrottleDevice[]',
        'blkioDeviceWriteIOps' => '\Piurafunk\Docker\Model\ThrottleDevice[]',
        'cpuPeriod' => 'int',
        'cpuQuota' => 'int',
        'cpuRealtimePeriod' => 'int',
        'cpuRealtimeRuntime' => 'int',
        'cpusetCpus' => 'string',
        'cpusetMems' => 'string',
        'devices' => '\Piurafunk\Docker\Model\DeviceMapping[]',
        'deviceCgroupRules' => 'string[]',
        'deviceRequests' => '\Piurafunk\Docker\Model\DeviceRequest[]',
        'kernelMemory' => 'int',
        'kernelMemoryTCP' => 'int',
        'memoryReservation' => 'int',
        'memorySwap' => 'int',
        'memorySwappiness' => 'int',
        'nanoCPUs' => 'int',
        'oomKillDisable' => 'bool',
        'init' => 'bool',
        'pidsLimit' => 'int',
        'ulimits' => '\Piurafunk\Docker\Model\ResourcesUlimits[]',
        'cpuCount' => 'int',
        'cpuPercent' => 'int',
        'iOMaximumIOps' => 'int',
        'iOMaximumBandwidth' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'cpuShares' => null,
        'memory' => 'int64',
        'cgroupParent' => null,
        'blkioWeight' => null,
        'blkioWeightDevice' => null,
        'blkioDeviceReadBps' => null,
        'blkioDeviceWriteBps' => null,
        'blkioDeviceReadIOps' => null,
        'blkioDeviceWriteIOps' => null,
        'cpuPeriod' => 'int64',
        'cpuQuota' => 'int64',
        'cpuRealtimePeriod' => 'int64',
        'cpuRealtimeRuntime' => 'int64',
        'cpusetCpus' => null,
        'cpusetMems' => null,
        'devices' => null,
        'deviceCgroupRules' => null,
        'deviceRequests' => null,
        'kernelMemory' => 'int64',
        'kernelMemoryTCP' => 'int64',
        'memoryReservation' => 'int64',
        'memorySwap' => 'int64',
        'memorySwappiness' => 'int64',
        'nanoCPUs' => 'int64',
        'oomKillDisable' => null,
        'init' => null,
        'pidsLimit' => 'int64',
        'ulimits' => null,
        'cpuCount' => 'int64',
        'cpuPercent' => 'int64',
        'iOMaximumIOps' => 'int64',
        'iOMaximumBandwidth' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpuShares' => 'CpuShares',
        'memory' => 'Memory',
        'cgroupParent' => 'CgroupParent',
        'blkioWeight' => 'BlkioWeight',
        'blkioWeightDevice' => 'BlkioWeightDevice',
        'blkioDeviceReadBps' => 'BlkioDeviceReadBps',
        'blkioDeviceWriteBps' => 'BlkioDeviceWriteBps',
        'blkioDeviceReadIOps' => 'BlkioDeviceReadIOps',
        'blkioDeviceWriteIOps' => 'BlkioDeviceWriteIOps',
        'cpuPeriod' => 'CpuPeriod',
        'cpuQuota' => 'CpuQuota',
        'cpuRealtimePeriod' => 'CpuRealtimePeriod',
        'cpuRealtimeRuntime' => 'CpuRealtimeRuntime',
        'cpusetCpus' => 'CpusetCpus',
        'cpusetMems' => 'CpusetMems',
        'devices' => 'Devices',
        'deviceCgroupRules' => 'DeviceCgroupRules',
        'deviceRequests' => 'DeviceRequests',
        'kernelMemory' => 'KernelMemory',
        'kernelMemoryTCP' => 'KernelMemoryTCP',
        'memoryReservation' => 'MemoryReservation',
        'memorySwap' => 'MemorySwap',
        'memorySwappiness' => 'MemorySwappiness',
        'nanoCPUs' => 'NanoCPUs',
        'oomKillDisable' => 'OomKillDisable',
        'init' => 'Init',
        'pidsLimit' => 'PidsLimit',
        'ulimits' => 'Ulimits',
        'cpuCount' => 'CpuCount',
        'cpuPercent' => 'CpuPercent',
        'iOMaximumIOps' => 'IOMaximumIOps',
        'iOMaximumBandwidth' => 'IOMaximumBandwidth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpuShares' => 'setCpuShares',
        'memory' => 'setMemory',
        'cgroupParent' => 'setCgroupParent',
        'blkioWeight' => 'setBlkioWeight',
        'blkioWeightDevice' => 'setBlkioWeightDevice',
        'blkioDeviceReadBps' => 'setBlkioDeviceReadBps',
        'blkioDeviceWriteBps' => 'setBlkioDeviceWriteBps',
        'blkioDeviceReadIOps' => 'setBlkioDeviceReadIOps',
        'blkioDeviceWriteIOps' => 'setBlkioDeviceWriteIOps',
        'cpuPeriod' => 'setCpuPeriod',
        'cpuQuota' => 'setCpuQuota',
        'cpuRealtimePeriod' => 'setCpuRealtimePeriod',
        'cpuRealtimeRuntime' => 'setCpuRealtimeRuntime',
        'cpusetCpus' => 'setCpusetCpus',
        'cpusetMems' => 'setCpusetMems',
        'devices' => 'setDevices',
        'deviceCgroupRules' => 'setDeviceCgroupRules',
        'deviceRequests' => 'setDeviceRequests',
        'kernelMemory' => 'setKernelMemory',
        'kernelMemoryTCP' => 'setKernelMemoryTCP',
        'memoryReservation' => 'setMemoryReservation',
        'memorySwap' => 'setMemorySwap',
        'memorySwappiness' => 'setMemorySwappiness',
        'nanoCPUs' => 'setNanoCPUs',
        'oomKillDisable' => 'setOomKillDisable',
        'init' => 'setInit',
        'pidsLimit' => 'setPidsLimit',
        'ulimits' => 'setUlimits',
        'cpuCount' => 'setCpuCount',
        'cpuPercent' => 'setCpuPercent',
        'iOMaximumIOps' => 'setIOMaximumIOps',
        'iOMaximumBandwidth' => 'setIOMaximumBandwidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpuShares' => 'getCpuShares',
        'memory' => 'getMemory',
        'cgroupParent' => 'getCgroupParent',
        'blkioWeight' => 'getBlkioWeight',
        'blkioWeightDevice' => 'getBlkioWeightDevice',
        'blkioDeviceReadBps' => 'getBlkioDeviceReadBps',
        'blkioDeviceWriteBps' => 'getBlkioDeviceWriteBps',
        'blkioDeviceReadIOps' => 'getBlkioDeviceReadIOps',
        'blkioDeviceWriteIOps' => 'getBlkioDeviceWriteIOps',
        'cpuPeriod' => 'getCpuPeriod',
        'cpuQuota' => 'getCpuQuota',
        'cpuRealtimePeriod' => 'getCpuRealtimePeriod',
        'cpuRealtimeRuntime' => 'getCpuRealtimeRuntime',
        'cpusetCpus' => 'getCpusetCpus',
        'cpusetMems' => 'getCpusetMems',
        'devices' => 'getDevices',
        'deviceCgroupRules' => 'getDeviceCgroupRules',
        'deviceRequests' => 'getDeviceRequests',
        'kernelMemory' => 'getKernelMemory',
        'kernelMemoryTCP' => 'getKernelMemoryTCP',
        'memoryReservation' => 'getMemoryReservation',
        'memorySwap' => 'getMemorySwap',
        'memorySwappiness' => 'getMemorySwappiness',
        'nanoCPUs' => 'getNanoCPUs',
        'oomKillDisable' => 'getOomKillDisable',
        'init' => 'getInit',
        'pidsLimit' => 'getPidsLimit',
        'ulimits' => 'getUlimits',
        'cpuCount' => 'getCpuCount',
        'cpuPercent' => 'getCpuPercent',
        'iOMaximumIOps' => 'getIOMaximumIOps',
        'iOMaximumBandwidth' => 'getIOMaximumBandwidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cpuShares'] = isset($data['cpuShares']) ? $data['cpuShares'] : null;
        $this->container['memory'] = isset($data['memory']) ? $data['memory'] : 0;
        $this->container['cgroupParent'] = isset($data['cgroupParent']) ? $data['cgroupParent'] : null;
        $this->container['blkioWeight'] = isset($data['blkioWeight']) ? $data['blkioWeight'] : null;
        $this->container['blkioWeightDevice'] = isset($data['blkioWeightDevice']) ? $data['blkioWeightDevice'] : null;
        $this->container['blkioDeviceReadBps'] = isset($data['blkioDeviceReadBps']) ? $data['blkioDeviceReadBps'] : null;
        $this->container['blkioDeviceWriteBps'] = isset($data['blkioDeviceWriteBps']) ? $data['blkioDeviceWriteBps'] : null;
        $this->container['blkioDeviceReadIOps'] = isset($data['blkioDeviceReadIOps']) ? $data['blkioDeviceReadIOps'] : null;
        $this->container['blkioDeviceWriteIOps'] = isset($data['blkioDeviceWriteIOps']) ? $data['blkioDeviceWriteIOps'] : null;
        $this->container['cpuPeriod'] = isset($data['cpuPeriod']) ? $data['cpuPeriod'] : null;
        $this->container['cpuQuota'] = isset($data['cpuQuota']) ? $data['cpuQuota'] : null;
        $this->container['cpuRealtimePeriod'] = isset($data['cpuRealtimePeriod']) ? $data['cpuRealtimePeriod'] : null;
        $this->container['cpuRealtimeRuntime'] = isset($data['cpuRealtimeRuntime']) ? $data['cpuRealtimeRuntime'] : null;
        $this->container['cpusetCpus'] = isset($data['cpusetCpus']) ? $data['cpusetCpus'] : null;
        $this->container['cpusetMems'] = isset($data['cpusetMems']) ? $data['cpusetMems'] : null;
        $this->container['devices'] = isset($data['devices']) ? $data['devices'] : null;
        $this->container['deviceCgroupRules'] = isset($data['deviceCgroupRules']) ? $data['deviceCgroupRules'] : null;
        $this->container['deviceRequests'] = isset($data['deviceRequests']) ? $data['deviceRequests'] : null;
        $this->container['kernelMemory'] = isset($data['kernelMemory']) ? $data['kernelMemory'] : null;
        $this->container['kernelMemoryTCP'] = isset($data['kernelMemoryTCP']) ? $data['kernelMemoryTCP'] : null;
        $this->container['memoryReservation'] = isset($data['memoryReservation']) ? $data['memoryReservation'] : null;
        $this->container['memorySwap'] = isset($data['memorySwap']) ? $data['memorySwap'] : null;
        $this->container['memorySwappiness'] = isset($data['memorySwappiness']) ? $data['memorySwappiness'] : null;
        $this->container['nanoCPUs'] = isset($data['nanoCPUs']) ? $data['nanoCPUs'] : null;
        $this->container['oomKillDisable'] = isset($data['oomKillDisable']) ? $data['oomKillDisable'] : null;
        $this->container['init'] = isset($data['init']) ? $data['init'] : null;
        $this->container['pidsLimit'] = isset($data['pidsLimit']) ? $data['pidsLimit'] : null;
        $this->container['ulimits'] = isset($data['ulimits']) ? $data['ulimits'] : null;
        $this->container['cpuCount'] = isset($data['cpuCount']) ? $data['cpuCount'] : null;
        $this->container['cpuPercent'] = isset($data['cpuPercent']) ? $data['cpuPercent'] : null;
        $this->container['iOMaximumIOps'] = isset($data['iOMaximumIOps']) ? $data['iOMaximumIOps'] : null;
        $this->container['iOMaximumBandwidth'] = isset($data['iOMaximumBandwidth']) ? $data['iOMaximumBandwidth'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['blkioWeight']) && ($this->container['blkioWeight'] > 1000)) {
            $invalidProperties[] = "invalid value for 'blkioWeight', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['blkioWeight']) && ($this->container['blkioWeight'] < 0)) {
            $invalidProperties[] = "invalid value for 'blkioWeight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['memorySwappiness']) && ($this->container['memorySwappiness'] > 100)) {
            $invalidProperties[] = "invalid value for 'memorySwappiness', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['memorySwappiness']) && ($this->container['memorySwappiness'] < 0)) {
            $invalidProperties[] = "invalid value for 'memorySwappiness', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpuShares
     *
     * @return int|null
     */
    public function getCpuShares()
    {
        return $this->container['cpuShares'];
    }

    /**
     * Sets cpuShares
     *
     * @param int|null $cpuShares An integer value representing this container's relative CPU weight versus other containers.
     *
     * @return $this
     */
    public function setCpuShares($cpuShares)
    {
        $this->container['cpuShares'] = $cpuShares;

        return $this;
    }

    /**
     * Gets memory
     *
     * @return int|null
     */
    public function getMemory()
    {
        return $this->container['memory'];
    }

    /**
     * Sets memory
     *
     * @param int|null $memory Memory limit in bytes.
     *
     * @return $this
     */
    public function setMemory($memory)
    {
        $this->container['memory'] = $memory;

        return $this;
    }

    /**
     * Gets cgroupParent
     *
     * @return string|null
     */
    public function getCgroupParent()
    {
        return $this->container['cgroupParent'];
    }

    /**
     * Sets cgroupParent
     *
     * @param string|null $cgroupParent Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.
     *
     * @return $this
     */
    public function setCgroupParent($cgroupParent)
    {
        $this->container['cgroupParent'] = $cgroupParent;

        return $this;
    }

    /**
     * Gets blkioWeight
     *
     * @return int|null
     */
    public function getBlkioWeight()
    {
        return $this->container['blkioWeight'];
    }

    /**
     * Sets blkioWeight
     *
     * @param int|null $blkioWeight Block IO weight (relative weight).
     *
     * @return $this
     */
    public function setBlkioWeight($blkioWeight)
    {

        if (!is_null($blkioWeight) && ($blkioWeight > 1000)) {
            throw new \InvalidArgumentException('invalid value for $blkioWeight when calling Resources., must be smaller than or equal to 1000.');
        }
        if (!is_null($blkioWeight) && ($blkioWeight < 0)) {
            throw new \InvalidArgumentException('invalid value for $blkioWeight when calling Resources., must be bigger than or equal to 0.');
        }

        $this->container['blkioWeight'] = $blkioWeight;

        return $this;
    }

    /**
     * Gets blkioWeightDevice
     *
     * @return \Piurafunk\Docker\Model\ResourcesBlkioWeightDevice[]|null
     */
    public function getBlkioWeightDevice()
    {
        return $this->container['blkioWeightDevice'];
    }

    /**
     * Sets blkioWeightDevice
     *
     * @param \Piurafunk\Docker\Model\ResourcesBlkioWeightDevice[]|null $blkioWeightDevice Block IO weight (relative device weight) in the form `[{\"Path\": \"device_path\", \"Weight\": weight}]`.
     *
     * @return $this
     */
    public function setBlkioWeightDevice($blkioWeightDevice)
    {
        $this->container['blkioWeightDevice'] = $blkioWeightDevice;

        return $this;
    }

    /**
     * Gets blkioDeviceReadBps
     *
     * @return \Piurafunk\Docker\Model\ThrottleDevice[]|null
     */
    public function getBlkioDeviceReadBps()
    {
        return $this->container['blkioDeviceReadBps'];
    }

    /**
     * Sets blkioDeviceReadBps
     *
     * @param \Piurafunk\Docker\Model\ThrottleDevice[]|null $blkioDeviceReadBps Limit read rate (bytes per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.
     *
     * @return $this
     */
    public function setBlkioDeviceReadBps($blkioDeviceReadBps)
    {
        $this->container['blkioDeviceReadBps'] = $blkioDeviceReadBps;

        return $this;
    }

    /**
     * Gets blkioDeviceWriteBps
     *
     * @return \Piurafunk\Docker\Model\ThrottleDevice[]|null
     */
    public function getBlkioDeviceWriteBps()
    {
        return $this->container['blkioDeviceWriteBps'];
    }

    /**
     * Sets blkioDeviceWriteBps
     *
     * @param \Piurafunk\Docker\Model\ThrottleDevice[]|null $blkioDeviceWriteBps Limit write rate (bytes per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.
     *
     * @return $this
     */
    public function setBlkioDeviceWriteBps($blkioDeviceWriteBps)
    {
        $this->container['blkioDeviceWriteBps'] = $blkioDeviceWriteBps;

        return $this;
    }

    /**
     * Gets blkioDeviceReadIOps
     *
     * @return \Piurafunk\Docker\Model\ThrottleDevice[]|null
     */
    public function getBlkioDeviceReadIOps()
    {
        return $this->container['blkioDeviceReadIOps'];
    }

    /**
     * Sets blkioDeviceReadIOps
     *
     * @param \Piurafunk\Docker\Model\ThrottleDevice[]|null $blkioDeviceReadIOps Limit read rate (IO per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.
     *
     * @return $this
     */
    public function setBlkioDeviceReadIOps($blkioDeviceReadIOps)
    {
        $this->container['blkioDeviceReadIOps'] = $blkioDeviceReadIOps;

        return $this;
    }

    /**
     * Gets blkioDeviceWriteIOps
     *
     * @return \Piurafunk\Docker\Model\ThrottleDevice[]|null
     */
    public function getBlkioDeviceWriteIOps()
    {
        return $this->container['blkioDeviceWriteIOps'];
    }

    /**
     * Sets blkioDeviceWriteIOps
     *
     * @param \Piurafunk\Docker\Model\ThrottleDevice[]|null $blkioDeviceWriteIOps Limit write rate (IO per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.
     *
     * @return $this
     */
    public function setBlkioDeviceWriteIOps($blkioDeviceWriteIOps)
    {
        $this->container['blkioDeviceWriteIOps'] = $blkioDeviceWriteIOps;

        return $this;
    }

    /**
     * Gets cpuPeriod
     *
     * @return int|null
     */
    public function getCpuPeriod()
    {
        return $this->container['cpuPeriod'];
    }

    /**
     * Sets cpuPeriod
     *
     * @param int|null $cpuPeriod The length of a CPU period in microseconds.
     *
     * @return $this
     */
    public function setCpuPeriod($cpuPeriod)
    {
        $this->container['cpuPeriod'] = $cpuPeriod;

        return $this;
    }

    /**
     * Gets cpuQuota
     *
     * @return int|null
     */
    public function getCpuQuota()
    {
        return $this->container['cpuQuota'];
    }

    /**
     * Sets cpuQuota
     *
     * @param int|null $cpuQuota Microseconds of CPU time that the container can get in a CPU period.
     *
     * @return $this
     */
    public function setCpuQuota($cpuQuota)
    {
        $this->container['cpuQuota'] = $cpuQuota;

        return $this;
    }

    /**
     * Gets cpuRealtimePeriod
     *
     * @return int|null
     */
    public function getCpuRealtimePeriod()
    {
        return $this->container['cpuRealtimePeriod'];
    }

    /**
     * Sets cpuRealtimePeriod
     *
     * @param int|null $cpuRealtimePeriod The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
     *
     * @return $this
     */
    public function setCpuRealtimePeriod($cpuRealtimePeriod)
    {
        $this->container['cpuRealtimePeriod'] = $cpuRealtimePeriod;

        return $this;
    }

    /**
     * Gets cpuRealtimeRuntime
     *
     * @return int|null
     */
    public function getCpuRealtimeRuntime()
    {
        return $this->container['cpuRealtimeRuntime'];
    }

    /**
     * Sets cpuRealtimeRuntime
     *
     * @param int|null $cpuRealtimeRuntime The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
     *
     * @return $this
     */
    public function setCpuRealtimeRuntime($cpuRealtimeRuntime)
    {
        $this->container['cpuRealtimeRuntime'] = $cpuRealtimeRuntime;

        return $this;
    }

    /**
     * Gets cpusetCpus
     *
     * @return string|null
     */
    public function getCpusetCpus()
    {
        return $this->container['cpusetCpus'];
    }

    /**
     * Sets cpusetCpus
     *
     * @param string|null $cpusetCpus CPUs in which to allow execution (e.g., `0-3`, `0,1`)
     *
     * @return $this
     */
    public function setCpusetCpus($cpusetCpus)
    {
        $this->container['cpusetCpus'] = $cpusetCpus;

        return $this;
    }

    /**
     * Gets cpusetMems
     *
     * @return string|null
     */
    public function getCpusetMems()
    {
        return $this->container['cpusetMems'];
    }

    /**
     * Sets cpusetMems
     *
     * @param string|null $cpusetMems Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.
     *
     * @return $this
     */
    public function setCpusetMems($cpusetMems)
    {
        $this->container['cpusetMems'] = $cpusetMems;

        return $this;
    }

    /**
     * Gets devices
     *
     * @return \Piurafunk\Docker\Model\DeviceMapping[]|null
     */
    public function getDevices()
    {
        return $this->container['devices'];
    }

    /**
     * Sets devices
     *
     * @param \Piurafunk\Docker\Model\DeviceMapping[]|null $devices A list of devices to add to the container.
     *
     * @return $this
     */
    public function setDevices($devices)
    {
        $this->container['devices'] = $devices;

        return $this;
    }

    /**
     * Gets deviceCgroupRules
     *
     * @return string[]|null
     */
    public function getDeviceCgroupRules()
    {
        return $this->container['deviceCgroupRules'];
    }

    /**
     * Sets deviceCgroupRules
     *
     * @param string[]|null $deviceCgroupRules a list of cgroup rules to apply to the container
     *
     * @return $this
     */
    public function setDeviceCgroupRules($deviceCgroupRules)
    {
        $this->container['deviceCgroupRules'] = $deviceCgroupRules;

        return $this;
    }

    /**
     * Gets deviceRequests
     *
     * @return \Piurafunk\Docker\Model\DeviceRequest[]|null
     */
    public function getDeviceRequests()
    {
        return $this->container['deviceRequests'];
    }

    /**
     * Sets deviceRequests
     *
     * @param \Piurafunk\Docker\Model\DeviceRequest[]|null $deviceRequests a list of requests for devices to be sent to device drivers
     *
     * @return $this
     */
    public function setDeviceRequests($deviceRequests)
    {
        $this->container['deviceRequests'] = $deviceRequests;

        return $this;
    }

    /**
     * Gets kernelMemory
     *
     * @return int|null
     */
    public function getKernelMemory()
    {
        return $this->container['kernelMemory'];
    }

    /**
     * Sets kernelMemory
     *
     * @param int|null $kernelMemory Kernel memory limit in bytes.
     *
     * @return $this
     */
    public function setKernelMemory($kernelMemory)
    {
        $this->container['kernelMemory'] = $kernelMemory;

        return $this;
    }

    /**
     * Gets kernelMemoryTCP
     *
     * @return int|null
     */
    public function getKernelMemoryTCP()
    {
        return $this->container['kernelMemoryTCP'];
    }

    /**
     * Sets kernelMemoryTCP
     *
     * @param int|null $kernelMemoryTCP Hard limit for kernel TCP buffer memory (in bytes).
     *
     * @return $this
     */
    public function setKernelMemoryTCP($kernelMemoryTCP)
    {
        $this->container['kernelMemoryTCP'] = $kernelMemoryTCP;

        return $this;
    }

    /**
     * Gets memoryReservation
     *
     * @return int|null
     */
    public function getMemoryReservation()
    {
        return $this->container['memoryReservation'];
    }

    /**
     * Sets memoryReservation
     *
     * @param int|null $memoryReservation Memory soft limit in bytes.
     *
     * @return $this
     */
    public function setMemoryReservation($memoryReservation)
    {
        $this->container['memoryReservation'] = $memoryReservation;

        return $this;
    }

    /**
     * Gets memorySwap
     *
     * @return int|null
     */
    public function getMemorySwap()
    {
        return $this->container['memorySwap'];
    }

    /**
     * Sets memorySwap
     *
     * @param int|null $memorySwap Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.
     *
     * @return $this
     */
    public function setMemorySwap($memorySwap)
    {
        $this->container['memorySwap'] = $memorySwap;

        return $this;
    }

    /**
     * Gets memorySwappiness
     *
     * @return int|null
     */
    public function getMemorySwappiness()
    {
        return $this->container['memorySwappiness'];
    }

    /**
     * Sets memorySwappiness
     *
     * @param int|null $memorySwappiness Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.
     *
     * @return $this
     */
    public function setMemorySwappiness($memorySwappiness)
    {

        if (!is_null($memorySwappiness) && ($memorySwappiness > 100)) {
            throw new \InvalidArgumentException('invalid value for $memorySwappiness when calling Resources., must be smaller than or equal to 100.');
        }
        if (!is_null($memorySwappiness) && ($memorySwappiness < 0)) {
            throw new \InvalidArgumentException('invalid value for $memorySwappiness when calling Resources., must be bigger than or equal to 0.');
        }

        $this->container['memorySwappiness'] = $memorySwappiness;

        return $this;
    }

    /**
     * Gets nanoCPUs
     *
     * @return int|null
     */
    public function getNanoCPUs()
    {
        return $this->container['nanoCPUs'];
    }

    /**
     * Sets nanoCPUs
     *
     * @param int|null $nanoCPUs CPU quota in units of 10<sup>-9</sup> CPUs.
     *
     * @return $this
     */
    public function setNanoCPUs($nanoCPUs)
    {
        $this->container['nanoCPUs'] = $nanoCPUs;

        return $this;
    }

    /**
     * Gets oomKillDisable
     *
     * @return bool|null
     */
    public function getOomKillDisable()
    {
        return $this->container['oomKillDisable'];
    }

    /**
     * Sets oomKillDisable
     *
     * @param bool|null $oomKillDisable Disable OOM Killer for the container.
     *
     * @return $this
     */
    public function setOomKillDisable($oomKillDisable)
    {
        $this->container['oomKillDisable'] = $oomKillDisable;

        return $this;
    }

    /**
     * Gets init
     *
     * @return bool|null
     */
    public function getInit()
    {
        return $this->container['init'];
    }

    /**
     * Sets init
     *
     * @param bool|null $init Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.
     *
     * @return $this
     */
    public function setInit($init)
    {
        $this->container['init'] = $init;

        return $this;
    }

    /**
     * Gets pidsLimit
     *
     * @return int|null
     */
    public function getPidsLimit()
    {
        return $this->container['pidsLimit'];
    }

    /**
     * Sets pidsLimit
     *
     * @param int|null $pidsLimit Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change.
     *
     * @return $this
     */
    public function setPidsLimit($pidsLimit)
    {
        $this->container['pidsLimit'] = $pidsLimit;

        return $this;
    }

    /**
     * Gets ulimits
     *
     * @return \Piurafunk\Docker\Model\ResourcesUlimits[]|null
     */
    public function getUlimits()
    {
        return $this->container['ulimits'];
    }

    /**
     * Sets ulimits
     *
     * @param \Piurafunk\Docker\Model\ResourcesUlimits[]|null $ulimits A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\"
     *
     * @return $this
     */
    public function setUlimits($ulimits)
    {
        $this->container['ulimits'] = $ulimits;

        return $this;
    }

    /**
     * Gets cpuCount
     *
     * @return int|null
     */
    public function getCpuCount()
    {
        return $this->container['cpuCount'];
    }

    /**
     * Sets cpuCount
     *
     * @param int|null $cpuCount The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
     *
     * @return $this
     */
    public function setCpuCount($cpuCount)
    {
        $this->container['cpuCount'] = $cpuCount;

        return $this;
    }

    /**
     * Gets cpuPercent
     *
     * @return int|null
     */
    public function getCpuPercent()
    {
        return $this->container['cpuPercent'];
    }

    /**
     * Sets cpuPercent
     *
     * @param int|null $cpuPercent The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
     *
     * @return $this
     */
    public function setCpuPercent($cpuPercent)
    {
        $this->container['cpuPercent'] = $cpuPercent;

        return $this;
    }

    /**
     * Gets iOMaximumIOps
     *
     * @return int|null
     */
    public function getIOMaximumIOps()
    {
        return $this->container['iOMaximumIOps'];
    }

    /**
     * Sets iOMaximumIOps
     *
     * @param int|null $iOMaximumIOps Maximum IOps for the container system drive (Windows only)
     *
     * @return $this
     */
    public function setIOMaximumIOps($iOMaximumIOps)
    {
        $this->container['iOMaximumIOps'] = $iOMaximumIOps;

        return $this;
    }

    /**
     * Gets iOMaximumBandwidth
     *
     * @return int|null
     */
    public function getIOMaximumBandwidth()
    {
        return $this->container['iOMaximumBandwidth'];
    }

    /**
     * Sets iOMaximumBandwidth
     *
     * @param int|null $iOMaximumBandwidth Maximum IO in bytes per second for the container system drive (Windows only)
     *
     * @return $this
     */
    public function setIOMaximumBandwidth($iOMaximumBandwidth)
    {
        $this->container['iOMaximumBandwidth'] = $iOMaximumBandwidth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


